// Para la lista simple
class NodoSimple {
    int valor;
    NodoSimple siguiente;

    public NodoSimple(int valor) {
        this.valor = valor;
        this.siguiente = null;
    }
}

class ListaSimple {
    NodoSimple cabeza;

    public ListaSimple() {
        this.cabeza = null;
    }

    // Métodos para agregar, eliminar, mostrar y ordenar en la lista simple
    // ...
}

// Para la lista doblemente ligada
class NodoDoble {
    int valor;
    NodoDoble siguiente;
    NodoDoble anterior;

    public NodoDoble(int valor) {
        this.valor = valor;
        this.siguiente = null;
        this.anterior = null;
    }
}

class ListaDoble {
    NodoDoble cabeza;

    public ListaDoble() {
        this.cabeza = null;
    }

    // Métodos para agregar, eliminar, mostrar y ordenar en la lista doblemente ligada
    // ...
}

// Para la lista circular
class NodoCircular {
    int valor;
    NodoCircular siguiente;

    public NodoCircular(int valor) {
        this.valor = valor;
        this.siguiente = null;
    }
}

class ListaCircular {
    NodoCircular cabeza;

    public ListaCircular() {
        this.cabeza = null;
    }

    // Métodos para agregar, eliminar, mostrar y ordenar en la lista circular
    // ...
}

// Funciones de ordenamiento
class Ordenamiento {
    public static void ordenar(int[] array) {
        // Algoritmo de ordenamiento (por ejemplo, Bubble Sort, Quick Sort, etc.)
        // ...
    }
}

public class MainActivity extends AppCompatActivity {
    // Aquí puedes implementar la lógica de la interfaz de usuario
    // con botones y acciones para interactuar con las diferentes listas y funciones de ordenamiento
    // 
}

